<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Notes App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
    </style>
</head>
<body class="bg-gray-100 p-8 min-h-screen flex items-center justify-center">

    <!-- Main Container -->
    <div class="bg-white p-8 rounded-2xl shadow-lg w-full max-w-2xl">
        <h1 class="text-3xl font-bold text-gray-800 mb-6 text-center">My Notes</h1>
        
        <!-- Note Form -->
        <form id="note-form" class="mb-8 p-6 bg-gray-50 rounded-xl">
            <input type="hidden" id="note-id">
            <input type="text" id="note-title" placeholder="Note Title" required class="w-full p-3 mb-4 rounded-xl border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500">
            <textarea id="note-content" placeholder="Note Content" rows="4" required class="w-full p-3 mb-4 rounded-xl border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
            <button type="submit" class="w-full bg-blue-600 text-white font-semibold py-3 rounded-xl hover:bg-blue-700 transition duration-300 shadow-md">Add Note</button>
        </form>

        <!-- Notes List -->
        <div id="notes-list" class="space-y-4">
            <!-- Notes will be rendered here dynamically -->
        </div>

        <!-- Custom Modal for Alerts -->
        <div id="alert-modal" class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center hidden">
            <div class="bg-white p-6 rounded-xl shadow-xl w-80 text-center">
                <p id="alert-message" class="text-gray-800 font-medium mb-4"></p>
                <button onclick="closeAlert()" class="bg-blue-600 text-white font-semibold py-2 px-6 rounded-xl hover:bg-blue-700 transition duration-300">OK</button>
            </div>
        </div>

    </div>

    <script>
        const API_URL = 'http://localhost:3000/api/notes';
        const notesList = document.getElementById('notes-list');
        const noteForm = document.getElementById('note-form');
        const noteIdInput = document.getElementById('note-id');
        const noteTitleInput = document.getElementById('note-title');
        const noteContentInput = document.getElementById('note-content');
        const formSubmitButton = noteForm.querySelector('button');

        // Custom alert function
        function showAlert(message) {
            const modal = document.getElementById('alert-modal');
            const msgElement = document.getElementById('alert-message');
            msgElement.textContent = message;
            modal.classList.remove('hidden');
        }

        function closeAlert() {
            const modal = document.getElementById('alert-modal');
            modal.classList.add('hidden');
        }

        // Fetch all notes from the backend
        async function fetchNotes() {
            try {
                const response = await fetch(API_URL);
                if (!response.ok) {
                    throw new Error('Failed to fetch notes');
                }
                const notes = await response.json();
                renderNotes(notes);
            } catch (error) {
                console.error('Error fetching notes:', error);
                showAlert('Could not connect to the server. Please ensure the server is running.');
            }
        }

        // Render notes to the DOM
        function renderNotes(notes) {
            notesList.innerHTML = ''; // Clear previous notes
            if (notes.length === 0) {
                notesList.innerHTML = '<p class="text-center text-gray-500">No notes yet. Add one above!</p>';
                return;
            }
            notes.forEach(note => {
                const noteElement = document.createElement('div');
                noteElement.className = 'bg-gray-50 p-6 rounded-xl shadow flex flex-col justify-between';
                noteElement.dataset.id = note._id;

                noteElement.innerHTML = `
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-2">${note.title}</h3>
                        <p class="text-gray-600 mb-4">${note.content}</p>
                    </div>
                    <div class="flex gap-2">
                        <button onclick="editNote('${note._id}', '${note.title.replace(/'/g, "\\'")}', '${note.content.replace(/'/g, "\\'")}')" class="bg-yellow-500 text-white font-semibold px-4 py-2 rounded-xl hover:bg-yellow-600 transition duration-300">Edit</button>
                        <button onclick="deleteNote('${note._id}')" class="bg-red-500 text-white font-semibold px-4 py-2 rounded-xl hover:bg-red-600 transition duration-300">Delete</button>
                    </div>
                `;
                notesList.appendChild(noteElement);
            });
        }

        // Handle form submission (Create/Update)
        noteForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const noteId = noteIdInput.value;
            const noteData = {
                title: noteTitleInput.value,
                content: noteContentInput.value
            };

            try {
                let response;
                if (noteId) { // Update existing note
                    response = await fetch(`${API_URL}/${noteId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(noteData),
                    });
                    formSubmitButton.textContent = 'Add Note'; // Reset button text
                } else { // Create new note
                    response = await fetch(API_URL, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(noteData),
                    });
                }

                if (!response.ok) {
                    throw new Error('Failed to save note');
                }

                noteForm.reset(); // Clear the form
                noteIdInput.value = ''; // Clear the hidden ID
                fetchNotes(); // Refresh the list
            } catch (error) {
                console.error('Error saving note:', error);
                showAlert('Failed to save note. Check the console for more details.');
            }
        });

        // Populate form for editing
        function editNote(id, title, content) {
            noteIdInput.value = id;
            noteTitleInput.value = title;
            noteContentInput.value = content;
            formSubmitButton.textContent = 'Update Note';
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        // Handle note deletion
        async function deleteNote(id) {
            try {
                const response = await fetch(`${API_URL}/${id}`, {
                    method: 'DELETE',
                });

                if (!response.ok) {
                    throw new Error('Failed to delete note');
                }

                fetchNotes(); // Refresh the list
            } catch (error) {
                console.error('Error deleting note:', error);
                showAlert('Failed to delete note.');
            }
        }

        // Initial fetch of notes when the page loads
        document.addEventListener('DOMContentLoaded', fetchNotes);
    </script>
</body>
</html>
